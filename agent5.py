import os
from typing import Dict
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message
from pydantic import BaseModel
from openai import OpenAI
from dotenv import load_dotenv
import json
import asyncio
import PyPDF2
import requests

def download_pdf(url, filename):
    response = requests.get(url)
    response.raise_for_status()  # –û—à–∏–±–∫–∞, –µ—Å–ª–∏ –Ω–µ 200

    with open(filename, 'wb') as f:
        f.write(response.content)
    print(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–∫: {filename}")

def save_pdf():
    urls = {
        "ai": "https://api.itmo.su/constructor-ep/api/v1/static/programs/10033/plan/abit/pdf",
        "ai_product": "https://api.itmo.su/constructor-ep/api/v1/static/programs/10035/plan/abit/pdf"
    }

    for key, url in urls.items():
        filename = f"{key}_study_plan.pdf"
        download_pdf(url, filename)

save_pdf()

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI —Å OpenRouter
client = OpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=OPENROUTER_API_KEY,
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class Form(StatesGroup):
    waiting_for_background = State()
    waiting_for_question = State()

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class BackgroundInfo(BaseModel):
    education: str
    experience: str
    interests: str
    goals: str


def read_pdf(file_path: str) -> str:
    try:
        with open(file_path, "rb") as file:
            reader = PyPDF2.PdfReader(file)
            text = ""
            for page in reader.pages:
                text += page.extract_text() or ""
            return text.strip()
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ PDF-—Ñ–∞–π–ª–∞ {file_path}: {str(e)}"

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤ —É—á–µ–±–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –∏–∑ PDF
ai_program_text = read_pdf("ai_study_plan.pdf")
ai_product_program_text = read_pdf("ai_product_study_plan.pdf")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ LLM
async def ask_llm(prompt: str, context: str = "") -> str:
    response = client.chat.completions.create(
        # model="meta-llama/llama-3-8b-instruct:free",
        model="deepseek/deepseek-chat-v3-0324:free",
        messages=[
            {"role": "system", "content": "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–æ–≤ –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã ITMO. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –ø–æ —Ç–µ–º–µ –æ–±—É—á–µ–Ω–∏—è."},
            {"role": "user", "content": f"{context}\n\n{prompt}"}
        ],
        temperature=0.7,
    )
    return response.choices[0].message.content

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
async def recommend_program_with_context(background: BackgroundInfo) -> str:
    """–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –±—ç–∫–≥—Ä–∞—É–Ω–¥–∞ –∏ —É—á–µ–±–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤"""
    prompt = f"""
    –ë—ç–∫–≥—Ä–∞—É–Ω–¥ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞:
    - –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {background.education}
    - –û–ø—ã—Ç: {background.experience}
    - –ò–Ω—Ç–µ—Ä–µ—Å—ã: {background.interests}
    - –¶–µ–ª–∏: {background.goals}

    –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã:
    
    1. –ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞ "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç":
    {ai_program_text}
    
    2. –ú–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä–∞ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ AI –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏":
    {ai_product_program_text}

    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –±—ç–∫–≥—Ä–∞—É–Ω–¥ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞ –∏ —É—á–µ–±–Ω—ã–µ –ø–ª–∞–Ω—ã –ø—Ä–æ–≥—Ä–∞–º–º. 
    –û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
    {{
        "recommended_program": "–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã",
        "reason": "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏",
        "suggested_courses": ["—Å–ø–∏—Å–æ–∫", "—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö", "–∫—É—Ä—Å–æ–≤"]
    }}
    """
    
    response = await ask_llm(prompt)
    return response

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
async def show_recommendation_result(state: FSMContext) -> str:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    data = await state.get_data()
    recommendation = data.get("recommendation", "{}")
    
    try:
        rec_data = json.loads(recommendation)
        program = rec_data.get("recommended_program", "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞")
        reason = rec_data.get("reason", "")
        courses = "\n- ".join(rec_data.get("suggested_courses", []))
        
        message = (
            f"üéì –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞: {program}\n\n"
            f"üìå –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: {reason}\n\n"
            f"üìö –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –∫—É—Ä—Å—ã:\n- {courses}\n\n"
            f"–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏!"
        )
    except json.JSONDecodeError:
        message = "–ü–æ–ª—É—á–µ–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n" + recommendation
    
    await state.set_state(Form.waiting_for_question)
    return message

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram
@dp.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â—É—é –º–∞–≥–∏—Å—Ç–µ—Ä—Å–∫—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –≤ ITMO.\n"
        "–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Å —Ç–≤–æ–µ–≥–æ –±—ç–∫–≥—Ä–∞—É–Ω–¥–∞. –ö–∞–∫–æ–µ —É —Ç–µ–±—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ?"
    )
    await state.set_state(Form.waiting_for_background)
    await state.update_data(conversation_stage="ask_education")

@dp.message(Form.waiting_for_background)
async def process_background(message: Message, state: FSMContext):
    data = await state.get_data()
    stage = data.get("conversation_stage")
    
    if stage == "ask_education":
        await state.update_data(education=message.text, conversation_stage="ask_experience")
        await message.answer("–ö–∞–∫–æ–π —É —Ç–µ–±—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ–ø—ã—Ç?")
    elif stage == "ask_experience":
        await state.update_data(experience=message.text, conversation_stage="ask_interests")
        await message.answer("–ö–∞–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã AI —Ç–µ–±—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç? (—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ, –±–∏–∑–Ω–µ—Å-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏ —Ç.–¥.)")
    elif stage == "ask_interests":
        await state.update_data(interests=message.text, conversation_stage="ask_goals")
        await message.answer("–ö–∞–∫–∏–µ —É —Ç–µ–±—è –∫–∞—Ä—å–µ—Ä–Ω—ã–µ —Ü–µ–ª–∏ –ø–æ—Å–ª–µ –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã?")
    elif stage == "ask_goals":
        await state.update_data(goals=message.text)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
        background = BackgroundInfo(
            education=data.get("education", ""),
            experience=data.get("experience", ""),
            interests=data.get("interests", ""),
            goals=message.text
        )
        recommendation = await recommend_program_with_context(background)
        await state.update_data(recommendation=recommendation)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_message = await show_recommendation_result(state)
        await message.answer(result_message)

@dp.message(Form.waiting_for_question)
async def process_question(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö"""
    data = await state.get_data()
    background = BackgroundInfo(
        education=data.get("education", ""),
        experience=data.get("experience", ""),
        interests=data.get("interests", ""),
        goals=data.get("goals", "")
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    context = f"""
    –ë—ç–∫–≥—Ä–∞—É–Ω–¥ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç–∞:
    - –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {background.education}
    - –û–ø—ã—Ç: {background.experience}
    - –ò–Ω—Ç–µ—Ä–µ—Å—ã: {background.interests}
    - –¶–µ–ª–∏: {background.goals}
    
    –ü—Ä–æ–≥—Ä–∞–º–º–∞ 1: –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç
    {ai_program_text}
    
    –ü—Ä–æ–≥—Ä–∞–º–º–∞ 2: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ AI –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏
    {ai_product_program_text}
    """
    
    response = await ask_llm(message.text, context)
    await message.answer(response)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())